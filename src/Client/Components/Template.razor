@inject IJSRuntime JSRuntime

<CustomPageTitle Title="@(Name)" />
<div class="width-all bg-yellow">
	<div class="width-90 container">
		<div class="row no-gutters">
			<div class="col component-title">@Name</div>
		</div>
		<div class="row no-gutters">
			<div class="col component-desc">@Description</div>
		</div>
	</div>
</div>
<div class="width-all yellow-slant">
	<div class="width-90 container">
		<div class="row no-gutters">
			@if (GettingStartedURL != null) {
			<div class="col offset-@(DocsURL==null?"4":"2")">
				<Href Class="component-button" href="@(GettingStartedURL)">GET STARTED</Href>
			</div>
			}
			@if (DocsURL != null) {
			<div class="col @(GettingStartedURL==null?"offset-4":"")">
				<Href Class="component-button" href="@(DocsURL)">READ THE DOCS</Href>
			</div>
			}
		</div>
		@if (WhatIs != null) {
		}
	</div>
</div>
<div class="width-all">
	<div class="width-90 container">
		<div class="@((WhatIs != null || WhyUse != null ? "border-bottom-steeltoe-blue":"") + " row no-gutters")" style="@((WhatIs != null || WhyUse != null ? "margin-bottom:7%;padding-bottom:7%":""))">
			@if (WhatIs != null) {
			<div class="col-sm mr-sm-2">
				<div class="row no-gutters">
					<div class="col component-whatis-title">
						What @(NameIsPlural ? "are" : "is") @Name?
					</div>
				</div>
				<div class="row no-gutters">
					<div class="col component-whatis-desc">
						@WhatIs
					</div>
				</div>
			</div>
			}
			@if (WhyUse != null) {
			<div class="col-sm ml-sm-2">
				<div class="row no-gutters">
					<div class="col component-whyuse-title">
						Why use @Name?
					</div>
				</div>
				<div class="row no-gutters">
					<div class="col component-whyuse-desc">
						@WhyUse
					</div>
				</div>
			</div>
			}
		</div>
		@if(Features != null) {
			<div class="row no-gutters">
				@foreach (var feature in Features) {
					if(AltFeatureTemplate != null) {
						if((i % 2) == 0){
							@FeatureTemplate(feature)
						}else{
							@AltFeatureTemplate(feature);
						}
					} else {
						@FeatureTemplate(feature)
					}

					i++;
				}
			</div>
		}
		<div class="row no-gutters" style="@((GettingStartedURL == null && DocsURL == null) || (DocsURL == null && !ShowBottomGetStarted) ? "":"margin: 7% 0 7% 0;")">
			@if (GettingStartedURL != null && ShowBottomGetStarted) {
				<div class="col offset-@(DocsURL==null&&ShowBottomGetStarted?"4":"2")">
					<Href Class="component-button" href="@(GettingStartedURL)">GET STARTED</Href>
				</div>
			}
			@if (DocsURL != null && ShowBottomDocsUrl) {
				<div class="col @(GettingStartedURL==null&&ShowBottomDocsUrl?"offset-4":"")">
					<Href Class="component-button" href="@DocsURL">READ THE DOCS</Href>
				</div>
			}
		</div>
	</div>
</div>
@if(OtherArea != null) {
	<div class="width-all">
		<div class="width-90 container">
			<div class="row no-gutters">
				@OtherArea
			</div>
		</div>
	</div>
}

@code {
	private int i = 0;
	[Parameter]
	public String Name { get; set; }

	[Parameter]
	public bool NameIsPlural { get; set; } = false;

	[Parameter]
	public bool ShowBottomGetStarted { get; set; } = true;

	[Parameter]
	public bool ShowBottomDocsUrl { get; set; } = true;

	[Parameter]
	public RenderFragment Description { get; set; }

	[Parameter]
	public RenderFragment WhatIs { get; set; }

	[Parameter]
	public RenderFragment WhyUse { get; set; }

	[Parameter]
	public RenderFragment<Feature> FeatureTemplate { get; set; }

	[Parameter]
	public RenderFragment<Feature> AltFeatureTemplate { get; set; } = null;

	[Parameter]
	public IReadOnlyList<Feature> Features { get; set; } = null;

	[Parameter]
	public string GettingStartedURL { get; set; }

	[Parameter]
	public string DocsURL { get; set; }

	[Parameter]
	public RenderFragment OtherArea { get; set; }

	protected override async Task OnAfterRenderAsync(bool first) {
		if(first) {
			await JSRuntime.InvokeVoidAsync("highlightCode",true);
			StateHasChanged();
		}

		await base.OnAfterRenderAsync(first);
		return;
	}
}
