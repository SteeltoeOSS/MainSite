@page "/messaging"

<Template Name="Messaging" Features="@features" DocsURL="/docs/messaging">
	<Description>Build highly scalable event-driven microservices connected to shared messaging systems.</Description>
	<WhatIs>The Steeltoe Messaging project applies core .NET concepts to the development of AMQP-based messaging solutions. It provides a "template" as a high-level abstraction for sending and receiving messages. It also provides support for Message-driven POCOs with a "listener container". These libraries facilitate management of AMQP resources while promoting the use of dependency injection and declarative configuration.</WhatIs>
	<FeatureTemplate Context="Feature">
		<div class="row component-feature no-gutters">
			<div class="col-6 text-center"><div class="component-feature-img"><img class="img-fluid" src="@Feature.Img" /></div></div>
			<div class="col">
				<div class="component-feature-title">@Feature.Title</div>
				<div class="component-feature-desc">@Feature.Description</div>
			</div>
		</div>
	</FeatureTemplate>
	<AltFeatureTemplate Context="Feature">
		<div class="row component-feature no-gutters">
			<div class="col-6">
				<div class="component-feature-title">@Feature.Title</div>
				<div class="component-feature-desc">@Feature.Description</div>
			</div>
			<div class="col-6 text-center"><div class="component-feature-img"><img class="img-fluid" src="@Feature.Img" /></div></div>
		</div>
	</AltFeatureTemplate>
</Template>

@code{
	private Feature[] features = new[] {
		new Feature() {
			Title = (MarkupString)"RabbitMQ Message Broker",
			Description = (b => {
				b.AddMarkupContent(1,"Using the native RabbitMQ .NET client within, the Steeltoe Messaging client abstracts the complexity of messaging containers and translates them into simple configuration values.");
			}),
			Img = "/images/rabbitmq.png"
		},
		//new Feature() {
		//	Title = (MarkupString)"Logging & Health Checks Built In",
		//	Description = (b => {
		//		b.AddMarkupContent(1,"With the addition of Steeltoe Logging and the health management endpoint, the application will receive and stream logs from the message broker as well include the message broker as an IHealthcontributor.");
		//	}),
		//	Img = "/images/Icon_cloud.svg"
		//},
		new Feature() {
			Title = (MarkupString)"Rabbit Admin",
			Description = (b => {
				b.AddMarkupContent(1,"Simple implementation of RabbitAdmin to automatically delare queues, exchanges, and bindings.");
			}),
			Img = "/images/Icon_keys.svg"
		}
	};
}