@page "/security-providers"
@page "/steeltoe-security"
@page "/security"

<Template Name="Security" Features="@features" DocsURL="/docs/security">
	<Description>Securing your applications and microservices using the security services provided by cloud platforms can seem like an impossible and complex development effort. Steeltoe reduces that effort by including security providers which enable you to easily integrate ASP.NET Core authentication and authorization features with Cloud Foundry security services.</Description>
	<WhatIs>Applications must have some notion of security, but you don’t want to lock the app in to a certain provider. Instead use the native functions of .NET and let the platform decide the provider. Cloud Security helps your app achieve that abstraction.</WhatIs>
	<WhyUse>Steeltoe provides a number of Security related services that simplify using a cloud platform’s security services in ASP.NET applications.</WhyUse>
	<FeatureTemplate Context="Feature">
		<div class="row component-feature no-gutters">
			<div class="col-6 text-center"><div class="component-feature-img"><img class="img-fluid" src="@Feature.Img" /></div></div>
			<div class="col">
				<div class="component-feature-title">@Feature.Title</div>
				<div class="component-feature-desc">@Feature.Description</div>
			</div>
		</div>
	</FeatureTemplate>
	<AltFeatureTemplate Context="Feature">
		<div class="row component-feature no-gutters">
			<div class="col-6">
				<div class="component-feature-title">@Feature.Title</div>
				<div class="component-feature-desc">@Feature.Description</div>
			</div>
			<div class="col-6 text-center"><div class="component-feature-img"><img class="img-fluid" src="@Feature.Img" /></div></div>
		</div>
	</AltFeatureTemplate>
</Template>

@code{
	private Feature[] features = new[] { 
		new Feature() {
			Title = (MarkupString)"Single Sign-on with OAuth2 or OpenID Connect",
			Description = (b => {
				b.AddMarkupContent(1,"Leverage existing credentials managed by an OAuth2 service for authentication and authorization in ASP.NET Core applications or with OpenID Connect in ASP.NET Framework (4.x).");
			}),
			Img = "/images/Icon_computer.svg"
		},
		new Feature() {
			Title = (MarkupString)"Resource Protection using JWT",
			Description = (b => {
				b.AddMarkupContent(1,"Control access to REST resources by using JWT tokens.");
			}),
			Img = "/images/Icon_security.svg"
		},
		new Feature() {
			Title = (MarkupString)"Redis Key Storage Provider",
			Description = (b => {
				b.AddMarkupContent(1,"Reconfigure the Data Protection service in ASP.NET to use an external Redis instance for key ring storage.");
			}),
			Img = "/images/Icon_down-arrow.svg"
		},
		new Feature() {
			Title = (MarkupString)"CredHub Client",
			Description = (b => {
				b.AddMarkupContent(1,"Interact directly with a CredHub secrets store in an ASP.NET application.");
			}),
			Img = "/images/Icon_security.svg"
		}
	};
}