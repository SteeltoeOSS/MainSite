@page "/security-providers/get-started/sso/openid/framework"

<Breadcrumbs NavName="Cloud Foundry Single Sign-on with OpenID Connect (.NET Framework)"
						 ParentLinkName="Security Providers"
						 ParentLinkUrl="/security-providers"
						 ShowGetStarted="true" />

<div class="width-all">
	<div class="width-60 container">
		<Tip>
			<Message>Looking for a .NET Core example? <Href href="security-providers/get-started/sso/openid">Have a look</Href>.</Message>
		</Tip>
	</div>
</div>

<Tutorial>
	<Title>Using Cloud Foundry SSO with OpenID Connect provider (.NET Framework)</Title>
	<Description>
		This is a guide to integrate a .Net framework Web API with the Cloud Foundry SSO identity provider service. The sample provides authentication to select entry points of an application. It is meant to provide authentication simiar to how IIS would when Windows authentication is enabled.
	</Description>
	<TutorialSteps>
		<div class="row">
			<div class="col-12 getting-started-header">First, <b>establish an identity provider</b>.</div>
		</div>
		<div class="row">
			<div class="col-12">
				<TabSet>
					@*<Steeltoe.Client.Components.StartInstanceTab.Local ServiceName="@ServiceName">
						<DockerCmd>
							docker run --rm -ti -p 8080:8080 --name steeltoe-uaa steeltoeoss/workshop-uaa-server
						</DockerCmd>
						<AdditionalSteps>
							<Note><Message>This is a developer image of the Cloud Foundry User Account and Authentication (UAA) OAuth identity provider. It is meant for development purposes only.</Message></Note>
						</AdditionalSteps>
					</Steeltoe.Client.Components.StartInstanceTab.Local>*@
					<Steeltoe.Client.Components.StartInstanceTab.CloudFoundry InstanceName="@InstanceName" ServiceName="@ServiceName">
						<CfCreateServiceCmd>cf create-service p-identity my-sso-plan @InstanceName</CfCreateServiceCmd>
						<AdditionalSteps>
							Use the <Href href="https://docs.pivotal.io/p-identity" target="_blank">Pivotal Single Sign-On guide</Href> to deploying the SSO tile. Choose from the list of supported identity providers.
						</AdditionalSteps>
					</Steeltoe.Client.Components.StartInstanceTab.CloudFoundry>
				</TabSet>
			</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-header">Next, <b>create a .NET Framework Web API</b> project</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						In Visual Studio (2019) choose to create a new project
						<img src="images/new-vs-proj/create-new-project.png" class="img-fluid" />
					</li>
					<li>
						Configure the new project with the follow values
						<img src="images/new-vs-proj/configure-new-project.png" class="img-fluid" />
						<ul>
							<li><b>Project Name:</b> @ProjectName</li>
							<li><b>Solution Name:</b> @ProjectName</li>
							<li><b>Framework:</b> (>= 4.5)</li>
						</ul>
					</li>
					<li>
						Choose to create a new Web API project type
						<img src="images/new-vs-proj/create-new-asp_net-web-app.png" class="img-fluid" />
					</li>
					<li>
						Once created, the project should be loaded
						<img src="images/new-vs-proj/create-successful.png" class="img-fluid" />
					</li>
				</ol>
			</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-header">Next, <b>install packages</b> needed</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						Open the package manager console
						<img src="images/initializr/open-package-manager-console.png" class="img-fluid" />
					</li>
					<li>
						Install NuGet distributed packages
<pre><code>Install-Package -Id Microsoft.Owin.Security.Cookies
Install-Package -Id Microsoft.Owin.Security.Cookies
Install-Package -Id Microsoft.Owin.Host.SystemWeb
Install-Package -Id Microsoft.AspNet.WebHelpers
Install-Package -Id Microsoft.AspNet.Identity.Owin
Install-Package -Id Microsoft.Extensions.Logging.Console
Install-Package -Id Steeltoe.Security.Authentication.CloudFoundryOwin -Version @SteeltoeVersion</code></pre>
					</li>
				</ol>
			</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-header">Then, create <b>supporting classes</b> and <b>OWIN startup</b> class</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						Create the <b>appsettings.json</b> file in the root of the project
<pre><code>{
	"Logging": {
		"IncludeScopes": true,
		"LogLevel": {
			"Default": "Debug",
			"System": "Information",
			"Microsoft": "Information",
			"Management": "Trace",
			"Steeltoe": "Trace"
		}
	},
	"security": {
		"oauth2": {
			"client": {
				"validateCertificates": false,
				"authDomain": "http://localhost:8080/uaa",
				"clientId": "fortuneservice", //do not change
				"clientSecret": "fortuneservice_secret" //do not change
			}
		}
	}
}</code></pre>
						<Note><Message>"fortuneservice" values have been hard coded in the UAA provider, to keep this a development only thing.</Message></Note>
					</li>
					<li>
						Create the <b>ApplicationConfig.cs</b> class in the <code>App_Start</code> folder
<pre><code>using System;
using System.IO;
using Microsoft.Extensions.Configuration;
using Steeltoe.Extensions.Configuration.CloudFoundry;

public class ApplicationConfig {
	public static CloudFoundryApplicationOptions CloudFoundryApplication {
		get {
			var opts = new CloudFoundryApplicationOptions();
			var appSection = Configuration.GetSection(CloudFoundryApplicationOptions.CONFIGURATION_PREFIX);
			appSection.Bind(opts);
			return opts;
		}
	}
	public static CloudFoundryServicesOptions CloudFoundryServices {
		get {
			var opts = new CloudFoundryServicesOptions();
			var serviceSection = Configuration.GetSection(CloudFoundryServicesOptions.CONFIGURATION_PREFIX);
			serviceSection.Bind(opts);
			return opts;
		}
	}
	public static IConfigurationRoot Configuration { get; set; }

	public static void Configure(string environment) {
		// Set up configuration sources.
		var builder = new ConfigurationBuilder()
				.SetBasePath(GetContentRoot())
				.AddJsonFile("appsettings.json", optional: false, reloadOnChange: false)
				.AddJsonFile($"appsettings.{environment}.json", optional: true)
				.AddEnvironmentVariables()
				.AddCloudFoundry();

		Configuration = builder.Build();
	}

	public static string GetContentRoot() {
		var basePath = (string)AppDomain.CurrentDomain.GetData("APP_CONTEXT_BASE_DIRECTORY") ??
				AppDomain.CurrentDomain.BaseDirectory;
		return Path.GetFullPath(basePath);
	}
}</code></pre>
					</li>
					<li>
						Create the <b>LoggingConfig.cs</b> class in the <code>App_Start</code> folder
<pre><code>using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Console;
using Steeltoe.Extensions.Logging;

public static class LoggingConfig{
	public static ILoggerFactory LoggerFactory { get; set; }
	public static ILoggerProvider LoggerProvider { get; set; }

	public static void Configure(IConfiguration configuration){
		LoggerProvider = new DynamicLoggerProvider(new ConsoleLoggerSettings().FromConfiguration(configuration));
		LoggerFactory = new LoggerFactory();
		LoggerFactory.AddProvider(LoggerProvider);
	}
}</code></pre>
					</li>
					<li>
						Create the <b>AccountController.cs</b> class in the <code>Controllers</code> folder
<pre><code>using Steeltoe.Security.Authentication.CloudFoundry;
using System.Web.Mvc;
using Microsoft.Owin.Security;
using System.Web;

...

public class AccountController : System.Web.Http.ApiController {

	public AccountController() {
	}

	[HttpGet]
	[AllowAnonymous]
	public void Get(string ReturnUrl) {
		var properties = new AuthenticationProperties { RedirectUri = ReturnUrl };
		HttpContext.Current.GetOwinContext().Authentication.Challenge(properties, CloudFoundryDefaults.DisplayName);
	}
}</code></pre>
					</li>
					<li>
						Turn off integrated authentication in <b>Web.config</b>
<pre><code>&lt;configuration&gt;
	
	...

	&lt;system.web&gt;
		...
		&lt;authentication mode="None" /&gt;
		...
	&lt;/system.web&gt;
	
	...
	
&lt;/configuration&gt;</code></pre>
					</li>
					<li>
						Modify Application_Start in <b>Global.asax.cs</b>
<pre><code>using System.Web.Http;
using System.Web.Mvc;

...

protected void Application_Start(){

...

	// Create applications configuration
	ApplicationConfig.Configure("development");
	LoggingConfig.Configure(ApplicationConfig.Configuration);

...

}</code></pre>
					</li>
					<li>
						Add a new Owin class
						<div>In Visual Studio choose Project > Add New Item > Search for "owin" > Choose "OWIN Startup Class"</div>
						<div>Name the new file "Startup.cs"</div>
					</li>
					<li>
						Update configuration of the new <b>Startup.cs</b> OWIN class
<pre><code>using System;
using Microsoft.Owin;
using Microsoft.AspNet.Identity;
using Microsoft.Owin.Security.Cookies;
using Microsoft.Owin.Security;
using Microsoft.Extensions.Logging;
using System.Security.Claims;
using System.Web.Helpers;
using Owin;
using Steeltoe.Security.Authentication.CloudFoundry.Owin;
using Steeltoe.Security.Authentication.CloudFoundry;
using OpenID_SSO_Example;
using OpenID_SSO_Example.App_Start;

[assembly: OwinStartup(typeof(Startup))]

...

public class Startup {
	public void Configuration(IAppBuilder app) {
		app.SetDefaultSignInAsAuthenticationType(DefaultAuthenticationTypes.ExternalCookie);

		// Enable the application to use a cookie to store information for the signed in user
		app.UseCookieAuthentication(new CookieAuthenticationOptions {
			AuthenticationType = DefaultAuthenticationTypes.ExternalCookie,
			AuthenticationMode = AuthenticationMode.Passive,
			CookieSecure = CookieSecureOption.Always,
			CookieName = ".AspNet.ExternalCookie",
			LoginPath = new PathString("/api/account"),
			SlidingExpiration = true,
			ExpireTimeSpan = TimeSpan.FromMinutes(5)
		});

		//Cloud Foundry
		app.UseCloudFoundryOpenIdConnect(
				ApplicationConfig.Configuration,
				CloudFoundryDefaults.DisplayName,
				(LoggerFactory)LoggingConfig.LoggerFactory);

		AntiForgeryConfig.UniqueClaimTypeIdentifier = ClaimTypes.NameIdentifier;
	}
}</code></pre>
					</li>
				</ol>
			</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-header">Then, <b>mark explicit access</b> to some of the app's endpoints</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						Open the <b>Controllers\ValuesControllers.cs</b> file and secure endpoints
<pre><code>using System.Collections.Generic;
using System.Web.Http;
using Steeltoe.Extensions.Configuration.CloudFoundry;
using Microsoft.Extensions.Logging;
	
public class ValuesController : ApiController{
	private CloudFoundryApplicationOptions _appOptions;
	private CloudFoundryServicesOptions _serviceOptions;
	private ILogger&lt;ValuesController&gt; _logger;

	public ValuesController(){
		_appOptions = ApplicationConfig.CloudFoundryApplication;
		_serviceOptions = ApplicationConfig.CloudFoundryServices;
		_logger = LoggingConfig.LoggerFactory.CreateLogger&lt;ValuesController&gt;();

		_logger.LogInformation("This is a {LogLevel} log", LogLevel.Information.ToString());
	}

	// GET api/values
	[HttpGet]
	[AllowAnonymous]
	public IEnumerable&lt;string&gt; Get(){
		return new string[] { "Hi There" };
	}

	// GET api/values/5
	[HttpGet]
	[Authorize]
	public string Get(int id){
		return "value: " + id.ToString();
	}

	// POST api/values
	[HttpPost]
	[Authorize]
	public void Post([FromBody]string value){
	}

	// PUT api/values/5
	[HttpPut]
	[Authorize]
	public void Put(int id, [FromBody]string value){
	}

	// DELETE api/values/5
	[HttpDelete]
	[Authorize]
	public void Delete(int id){
	}
}</code></pre>
						<Note><Message>Notice the default GET endpoint with no params is open to anonymous connections but the other endpoints all require authorization. With the combination of SSO functions, the user will be prompted for login and returned.</Message></Note>
					</li>
					<li>
						<div>Run the application</div>
						<div>
							<TabSet>
								@*<Steeltoe.Client.Components.RunAppTab.Local ProjectName="@ProjectName">
									<AdditionalSteps>
					<li>
						Once the app loads in the browser go to the <code>/api/values</code> endpoint. It should load with no issue. Then try going to the <code>/api/values/5</code> endpoint. This will redirect you to the UAA login page. Login with the user <b>fortuneTeller</b> and password <b>password</b>. You will be redirected back to the app's page where the output of <samp>value: 5</samp> is shown.
					</li>
					</AdditionalSteps>
					</Steeltoe.Client.Components.RunAppTab.Local>*@
					<Steeltoe.Client.Components.RunAppTab.CloudFoundry ProjectName="@ProjectName" InstanceName="@InstanceName">
						<AdditionalSteps>
							<li>
								The app should load with no issue. Try going to the <code>/api/values/5</code> endpoint. This will redirect you to the identity providers login page. Login with valid credentials. You will be redirected back to the app's page where the output of <samp>value: 5</samp> is shown.
							</li>
						</AdditionalSteps>
					</Steeltoe.Client.Components.RunAppTab.CloudFoundry>
					</TabSet>
			</div>
			</li>
			</ol>
		</div>
		</div>
	</TutorialSteps>
</Tutorial>
@code
{
	private const string ServiceName = "SSO";
	private const string InstanceName = "myOidSSOExample";
	private const string ProjectName = "OpenID_SSO_Example";
	private const string SteeltoeVersion = "2.5";
}
}
