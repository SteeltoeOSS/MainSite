@page "/security-providers/get-started/redisstore"

<Breadcrumbs NavName="Key Ring with Redis"
							 ParentLinkName="Security Providers"
							 ParentLinkUrl="/security-providers"
							 ShowGetStarted="true" />
<Tutorial>
	<Title>Using Cloud Security with a Redis Cache for key ring store</Title>
	<Description>This tutorial takes you through setting up a .NET Core application that stores its master keys used to protect payloads in an external Redis cache. Learn more about ASP.NET data protection <Href href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection" target="_blank"></Href>. </Description>
	<TutorialSteps>

		<div class="row">
			<div class="col-12 getting-started-header">First, <b>start a Redis instance</b>. Depending on your hosting platform this is done in several ways.</div>
		</div>
		<div class="row">
			<div class="col-12">
				<TabSet>
					<Steeltoe.Client.Components.StartInstanceTab.Local ServiceName="@ServiceName">
						<DockerCmd>docker run --publish 6379:6379 steeltoeoss/redis</DockerCmd>
					</Steeltoe.Client.Components.StartInstanceTab.Local>
					<Steeltoe.Client.Components.StartInstanceTab.CloudFoundry InstanceName="@InstanceName" ServiceName="@ServiceName">
						<CfCreateServiceCmd>cf create-service p.redis cache-small @InstanceName</CfCreateServiceCmd>
						<AdditionalSteps>
							<Note><Message>In the above example we are choosing p.redis service with a cache-small plan. Naming can vary in each foundation. Find your plan naming with the <code>cf marketplace</code> command</Message></Note>
						</AdditionalSteps>
					</Steeltoe.Client.Components.StartInstanceTab.CloudFoundry>
					<Steeltoe.Client.Components.StartInstanceTab.Azure InstanceName="@InstanceName" ServiceName="@ServiceName">
						<AzureGettingStartedUrl>https://docs.microsoft.com/en-us/azure/azure-cache-for-redis/scripts/create-cache</AzureGettingStartedUrl>
					</Steeltoe.Client.Components.StartInstanceTab.Azure>
					<Steeltoe.Client.Components.StartInstanceTab.Kubernetes InstanceName="@InstanceName" ServiceName="@ServiceName">
						<HelmGettingStartedUrl>https://hub.helm.sh/charts/stable/redis</HelmGettingStartedUrl>
						<HelmCmd>helm install --name @InstanceName --set master.service.type=NodePort,master.persistence.enabled=false stable/redis</HelmCmd>
					</Steeltoe.Client.Components.StartInstanceTab.Kubernetes>
					@*<Steeltoe.Client.Components.StartInstanceTab.StTooling InstanceName="@InstanceName" ServiceName="@ServiceName" />*@
				</TabSet>
			</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-header">Next, <b>create a .NET Core WebAPI</b> using redis for key storage</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						<Steeltoe.Client.Components.AppSettingsTab.Initiallizr ImageName="redis-connector.png" DependencyName="Redis" ProjectName="@ProjectName" />
					</li>
					<li>Extract the zipped project and open in your IDE of choice (we use Visual Studio)</li>
					<li>
						Set the instance address in <b>appsettings.json</b>
						<TabSet>
							<Steeltoe.Client.Components.AppSettingsTab.Local
														ServiceName="@ServiceName"
														ParentSettingsParamName="redis"
														ChildSettingsParamName="client"
														ServicePort="6379"
														ServiceHost="127.0.0.1" />
							<Steeltoe.Client.Components.AppSettingsTab.CloudFoundry />
							<Steeltoe.Client.Components.AppSettingsTab.Azure InstanceName="@InstanceName"
																												ServiceName="@ServiceName"
																												ParentSettingsParamName="redis"
																												ChildSettingsParamName="client"
																												ServicePort="AZURE_PROVIDED"
																												ServiceHost="AZURE_PROVIDED" />
							<Steeltoe.Client.Components.AppSettingsTab.Kubernetes InstanceName="@InstanceName"
																														 ServiceName="@ServiceName"
																														 ServicePort="HELM_PROVIDED_PORT_NUMBER"
																														 ParentSettingsParamName="redis"
																														 ChildSettingsParamName="client"
																														 ServiceHost="HELM_PROVIDED_HOST_ADDRESS" />
							@*<Steeltoe.Client.Components.AppSettingsTab.StTooling />*@
						</TabSet>
					</li>
					<li>
						Set the Redis multiplexer and DataProtection in <b>Startup.cs</b>
<pre><code>using Steeltoe.CloudFoundry.Connector.Redis;

public class Startup {
...
 public IConfiguration Configuration { get; private set; }
 public Startup(IConfiguration configuration)
 {
		 Configuration = configuration;
 }
 public void ConfigureServices(IServiceCollection services)
 {
		 // Add StackExchange ConnectionMultiplexer configured from Cloud Foundry
		 services.AddRedisConnectionMultiplexer(Configuration);

		 // Add DataProtection and persist keys to Redis service
		 services.AddDataProtection()
			.PersistKeysToRedis()
			.SetApplicationName("Some Name");
		 // Add framework services.
		 services.AddMvc();
		 ...
}
...</code></pre>
					</li>
					<li>
						Run the application
						<TabSet>
							<Steeltoe.Client.Components.RunAppTab.Local ProjectName="@ProjectName" />
							<Steeltoe.Client.Components.RunAppTab.CloudFoundry ProjectName="@ProjectName" InstanceName="@ServiceName" />
							<Steeltoe.Client.Components.RunAppTab.AzureAppService>
								<AzureDeployHowToUrl>https://docs.microsoft.com/en-us/visualstudio/deployment/quickstart-deploy-to-azure?view=vs-2019</AzureDeployHowToUrl>
							</Steeltoe.Client.Components.RunAppTab.AzureAppService>
							<Steeltoe.Client.Components.RunAppTab.Kubernetes ProjectName="@ProjectName" />
							@*<Steeltoe.Client.Components.RunAppTab.StTooling ProjectName="@ProjectName" />*@
						</TabSet>
					</li>
					<li>
						That's it! Now you can run multiple instances of your application and they will all share the same master key for encrypting its payloads.
					</li>
				</ol>
			</div>
		</div>
	</TutorialSteps>
</Tutorial>
@code
{
	private const string ServiceName = "RedisStore";
	private const string InstanceName = "myRedisKeyRing";
	private const string ProjectName = "Redis_KeyRing_Example";
}
