@page "/service-discovery/get-started/consul"

<Breadcrumbs NavName="Consul Service Discovery"
						 ParentLinkName="Service Discovery"
						 ParentLinkUrl="/service-discovery"
						 ShowGetStarted="true" />
<Tutorial>
	<Title>Using Service Discovery with Hashicorp Consul server</Title>
	<Description>This tutorial takes you through setting up two .NET Core applications using services discovery. The first will register it's endpoints for discovery, and the second will discover the first's services.</Description>
	<TutorialSteps>

		<div class="row">
			<div class="col-12 getting-started-header">First, <b>start a Hashicorp Consul server</b>. Depending on your hosting platform this is done in several ways.</div>
		</div>
		<div class="row">
			<div class="col-12">
				<TabSet>
					<Steeltoe.Client.Components.StartInstanceTab.Local ServiceName="@ServiceName">
						<DockerCmd>docker run --publish 8500:8500 consul</DockerCmd>
					</Steeltoe.Client.Components.StartInstanceTab.Local>
					@*<Steeltoe.Client.Components.StartInstanceTab.CloudFoundry InstanceName="@InstanceName" ServiceName="@ServiceName">
							<CFCreateServiceCmd>cf create-service p-service-registry standardd @InstanceName</CFCreateServiceCmd>
						</Steeltoe.Client.Components.StartInstanceTab.CloudFoundry>
						<Steeltoe.Client.Components.StartInstanceTab.StTooling InstanceName="@InstanceName" ServiceName="@ServiceName" ToolingServiceName="eureka-server" />*@
				</TabSet>
			</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-header">Next, <b>create a .NET Core WebAPI</b> that registers itself as a service.</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						<Steeltoe.Client.Components.AppSettingsTab.Initiallizr ImageName="service-discovery.png" DependencyName="Discovery" ProjectName="@(RegisterProjectName.Replace("-","_"))" />
					</li>
					<li>Extract the zipped project and open in your IDE of choice (we use Visual Studio)</li>
					<li>
						Set the instance address in <b>appsettings.json</b>
						<TabSet>
							<Steeltoe.Client.Components.AppSettingsTab.Local ServiceName="@ServiceName"
																		SpringApplicationName="@RegisterProjectName"
																		ConsulHostAddress="localhost"
																		ConsulHostPort="8500"
																		ConsulShouldRegister="true"
																		ConsulAppPort="8080"
																		ConsulAppIP="localhost" />
							@*<Steeltoe.Client.Components.AppSettingsTab.Azure InstanceName="@InstanceName"
																													ServiceName="@ServiceName"
																													SpringApplicationName=""
																													ShouldRegisterWithEureka=""
																													EurekaServerUrl=""
																													ShouldFetchEurekaRegistry=""
																													EurekaAppPort="" />
								<Steeltoe.Client.Components.AppSettingsTab.Kubernetes InstanceName="@InstanceName"
																															 ServiceName="@ServiceName"
																													SpringApplicationName=""
																													ShouldRegisterWithEureka=""
																													EurekaServerUrl=""
																													ShouldFetchEurekaRegistry=""
																													EurekaAppPort="" />*@
							@*<Steeltoe.Client.Components.AppSettingsTab.StTooling />*@
						</TabSet>
					</li>
					<Tip><Message>Looking for additional params to use when connecting? Have a look at the <Href href="/service-discovery/docs" target="_blank">docs</Href></Message></Tip>
					<li>
						Validate the port number the app will be served on, in <b>Properties\launchSettings.json</b>
						<TabSet>
							<Steeltoe.Client.Components.IISSettingsTab.Local />
						</TabSet>
					</li>
					<li>
						Run the application and confirm it has registered with Consul
						<TabSet>
							<Steeltoe.Client.Components.RunAppTab.Local ProjectName="@RegisterProjectName.Replace("-","_")">
								<AdditionalSteps>
					<li>
						Navigate to the Consul dashboard at <a href="http://localhost:8500/" target="_blank">http://localhost:8500/</a> to see the service listed.
					</li>
					<li>Leave the application running while you continue to the next steps, you'll be connecting to it.</li>
					</AdditionalSteps>
					</Steeltoe.Client.Components.RunAppTab.Local>
					@*<Steeltoe.Client.Components.RunAppTab.CloudFoundry ProjectName="@RegisterProjectName" ServiceName="@ServiceName">
							<AdditionalSteps>
								<li>
									Confirm the services have registered by navigating to the Eureka dashboard. <a href="https://docs.pivotal.io/spring-cloud-services/2-0/common/service-registry/using-the-dashboard.html" target="_blank">Learn more</a> about finding the URL to Eureka.
								</li>
								</AdditionalSteps>
								</Steeltoe.Client.Components.RunAppTab.CloudFoundry>
						<Steeltoe.Client.Components.RunAppTab.StTooling ProjectName="@RegisterProjectName" />*@
					</TabSet>
					@*<img src="images/initializr/eureka-dash.png" class="img-fluid" />*@
					</li>
				</ol>
			</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-header">Then, <b>create another .NET Core WebAPI</b> that will discover the registered service.</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						<Steeltoe.Client.Components.AppSettingsTab.Initiallizr ImageName="service-discovery.png" DependencyName="Discovery" ProjectName="@DiscoverProjectName.Replace("-","_")" />
					</li>
					<li>
						Update the discovery values to not register in <b>appsettings.json</b>
						<TabSet>
							<Steeltoe.Client.Components.AppSettingsTab.Local ServiceName="@ServiceName"
																															 SpringApplicationName="@DiscoverProjectName"
																															 ConsulHostAddress="localhost"
																															 ConsulHostPort="8500"
																															 ConsulShouldRegister="false" />
							@*<Steeltoe.Client.Components.AppSettingsTab.CloudFoundry ShouldRegisterWithEureka="false" ServiceName="@ServiceName" />
								<Steeltoe.Client.Components.AppSettingsTab.StTooling ShouldRegisterWithEureka="false" ServiceName="@ServiceName" />*@
						</TabSet>
					</li>
					<li>
						Validate the port number the app will be served on, in <b>Properties\launchSettings.json</b>
						<TabSet>
							<Steeltoe.Client.Components.IISSettingsTab.Local ApplicationUrl="http://localhost:8081" />
						</TabSet>
					</li>
					<li>
						Change the values controller to make a request to the discovery service and return the result in <b>contollers\ValuesController.cs</b>
<pre><code>using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Mvc;
using Steeltoe.Common.Discovery;
using System.Net.Http;

namespace Consul_Discover_Example.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ValuesController : ControllerBase
    {
        private readonly ILogger _logger;
        DiscoveryHttpClientHandler _handler;
        public ValuesController(ILogger&lt;ValuesController&gt; logger, IDiscoveryClient client)
        {
            _logger = logger;
            _handler = new DiscoveryHttpClientHandler(client);
        }

        // GET api/values
        [HttpGet]
        public async Task&lt;string&gt; Get()
        {
            var client = new HttpClient(_handler, false);
            return await client.GetStringAsync("http://@(RegisterProjectName)/api/values");
        }
    }
}</code></pre>
						<Note><Message>Notice the use of <code>@(RegisterProjectName)</code> as the URI. Because Discovery has been enabled, the negotiation with the discovery Server happens automatically.</Message></Note>
					</li>
					<li>
						Run the app to see discovery in action
						<TabSet>
							<Steeltoe.Client.Components.RunAppTab.Local ProjectName="@DiscoverProjectName.Replace("-","_")" VSEndpointAddress="http://localhost:8081/api/values" />
							@*<Steeltoe.Client.Components.RunAppTab.CloudFoundry ProjectName="@DiscoverProjectName" InstanceName="@ServiceName" />
								<Steeltoe.Client.Components.RunAppTab.StTooling ProjectName="@DiscoverProjectName" />*@
						</TabSet>
					</li>
					<li>
						Once the discovery app loads in the browser you will see the 2 values that were retrieved from the registered app.
						<br /><samp>["value1","value2"]</samp>
					</li>
				</ol>
			</div>
		</div>

	</TutorialSteps>
</Tutorial>
@code
{
	private const string ServiceName = "Consul";
	//private string InstanceName = "myConsulExample";
	private const string RegisterProjectName = "Consul-Register-Example";
	private const string DiscoverProjectName = "Consul-Discover-Example";
}
