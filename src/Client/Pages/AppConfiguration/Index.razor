@page "/app-configuration"
@page "/app-config"
@page "/steeltoe-configuration"

<Template Name="Application Configuration" Features="@features" DocsURL="/docs/configuration">
	<Description>Separating configuration from application code is an important discipline in cloud-native development. Spring Cloud Config Server provides a mechanism to store your applicationâ€™s configuration externally, and have it injected into your application at runtime. Steeltoe includes a custom .NET Configuration Provider that utilizes Spring Cloud Config Server to pull in config values stored in Git, the filesystem, or HashiCorp Vault.</Description>
	<WhatIs>Steeltoe Configuration builds on the new .NET configuration API, which enables developers to configure an application with values from a variety of sources by using Configuration Providers.</WhatIs>
	<WhyUse>With the added providers, Steeltoe Configuration takes care of managing connections to external config servers and provides new resources, such as placeholders and random values.</WhyUse>
	<FeatureTemplate Context="Feature">
		<div class="row component-feature no-gutters">
			<div class="col-6 text-center"><div class="component-feature-img"><img class="img-fluid" src="@Feature.Img" /></div></div>
			<div class="col">
				<div class="component-feature-title">@Feature.Title</div>
				<div class="component-feature-desc">@Feature.Description</div>
			</div>
		</div>
	</FeatureTemplate>
	<AltFeatureTemplate Context="Feature">
		<div class="row component-feature no-gutters">
			<div class="col-6">
				<div class="component-feature-title">@Feature.Title</div>
				<div class="component-feature-desc">@Feature.Description</div>
			</div>
			<div class="col-6 text-center"><div class="component-feature-img"><img class="img-fluid" src="@Feature.Img" /></div></div>
		</div>
	</AltFeatureTemplate>
</Template>

@code{
	private Feature[] features = new[] { 
		new Feature() {
			Title = (MarkupString)"Spring Config Server Provider",
			Description = (b => {
				b.AddMarkupContent(1,"Enable a .NET application to use a Spring Cloud Config server as a provider.");
			}),
			Img = "/images/icon-spring-cloud.svg"
		},
		new Feature() {
			Title = (MarkupString)"Placeholders in Configuration",
			Description = (b => {
				b.AddMarkupContent(1,"Define configuration values as placeholders in your configuration and have them resolved to real values at runtime during configuration access.");
			}),
			Img = "/images/Icon_down-arrow.svg"
		},
		new Feature() {
			Title = (MarkupString)"Random Values",
			Description = (b => {
				b.AddMarkupContent(1,"Generate random values as integers, longs, UUIDs or strings as part of your application's configuration values.");
			}),
			Img = "/images/Icon_data-transfer.svg"
		},
		new Feature() {
			Title = (MarkupString)"Cloud Foundry Provider",
			Description = (b => {
				b.AddMarkupContent(1,"A custom .NET provider for the Cloud Foundry platform that parses the VCAP environment variables and automatically loads them as configuration values.");
			}),
			Img = "/images/cloud-foundry.png"
		}
	};
}
