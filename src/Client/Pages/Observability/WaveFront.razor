@page "/observability/wavefront"

	<Breadcrumbs NavName="Wavefront"
							 ParentLinkName="Observability"
							 ParentLinkUrl="/observability"
							 ShowGetStarted="false" />
<Tutorial>
	<Title>Using Wavefront for app container metrics, distributed tracing, and observability</Title>
	<Description>This tutorial takes you creating a simple Steeltoe app with actuators, logging, and distributed tracing. With that app running you then export the data to a Wavefront account.</Description>
	<TutorialSteps>
		<div class="row">
			<div class="col-12 getting-started-header bold">Prerequisites</div>
		</div>
		<div class="row">
			<div class="col-12">
				You'll need a Wavefront account to complete this guide successfully. <Href href="https://www.wavefront.com/sign-up/" NewWindow="true">Create a 30 day trial</Href>, if you don't already have access.
			</div>
		</div>
    <div class="row">
			<div class="col-12 getting-started-header">First, <b>clone to accompanying repo</b> that contains all the needed assets</div>
		</div>
    <div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						<TabSet>
							<Tab Title="Local">
								<pre><code class="powershell">git clone https://github.com/steeltoeoss-incubator/observability.git</code></pre>
                <pre><code class="powershell">cd observability/wavefront</code></pre>
							</Tab>
						</TabSet>
					</li>
          <li>
            Have a look at what things are provided
            <pre><code class="powershell">ls</code></pre>
<pre><code>Name                    Description
----                    ----
dashboard-template.json Wavefront dashboard configuration
docker-compose.yml      Docker file to start all containers
telegraf.conf           Telegraf inputs and output configuration
</code></pre>
          </li>
          <li>
            Replace the placeholder <code>YOUR_API_TOKEN</code> in <b>docker-compose.yml</b> with your Wavefront API token. Lean how to retrieve that token <Href href="https://docs.wavefront.com/users_account_managing.html" target="_blank">here</Href>.
          </li>
				</ol>
			</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-header">Then <b>create a .NET Core WebAPI</b> with the correct Steeltoe dependencies</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						<Steeltoe.Client.Components.AppSettingsTab.Initiallizr ImageName="actuators-dynamiclogger-dockerfile_net31_st24.png" DependencyName="Actuators, DynamicLogging, Dockerfile" ProjectName="@ProjectName" />
					</li>
					<li>Extract the zipped project and open in your IDE of choice (we use Visual Studio)</li>
					<li>
						Add the other needed actuators in <b>startup.cs</b>
<pre><code>using Steeltoe.Management.Endpoint.Metrics;
using Steeltoe.Management.Tracing;
using Steeltoe.Management.Exporter.Tracing;

...

public class Startup
{
  ...

  public void ConfigureServices(IServiceCollection services)
  {
    ...
  
    services.AddPrometheusActuator(Configuration);
    services.AddMetricsActuator(Configuration);
    services.AddDistributedTracing(Configuration);
    services.AddZipkinExporter(Configuration);

    ...
  }
 
  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
  {
    ...

		app.UsePrometheusActuator();
		app.UseMetricsActuator();
		app.UseTracingExporter();

		...
  }
}</code></pre>
					</li>
					<li>
						Set the actuator path, exposure, and zipkin server address in <b>appsettings.json</b>
						<pre><code>{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "System": "Information",
      "Microsoft": "Information"
    }
  },
  "spring": {
    "application": {
      "name": "Wavefront_demo_app"
    }
  },
  "management": {
    "endpoints": {
      "actuator": {
        "exposure": {
          "include": [ "*" ]
        }
      },
      "path": "/",
      "cloudfoundry": {
        "validateCertificates": false
      }
    },
    "metrics": {
      "exporter": {
        "cloudfoundry": {
          "validateCertificates": false
        }
      }
    },
    "tracing": {
      "alwaysSample": true,
      "useShortTraceIds ": true,
      "exporter": {
        "zipkin": {
          "endpoint": "http://wavefront-proxy:9411/api/v2/spans",
          "validateCertificates": false
        }
      }
    }
  }
}</code></pre>
					</li>
          <li>
            Adjust <b>docker-compose.yml</b> to include the path to the .NET project by replacing <code>&lt;ABSOLUTE_PATH_TO_PROJECT&gt;</code> with the absolute path to the folder holding the .csproj file.
          </li>
				</ol>
			</div>
		</div>
    <div class="row">
			<div class="col-12 getting-started-header">Next, <b>deploy everything</b> with docker compose</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
        <TabSet>
				  <Steeltoe.Client.Components.RunAppTab.DockerCompose>
           <AdditionalSteps>
            <Note>If you get a permissionerror message about "db.lock", close your IDE. Then run docker-compose command again.</Note>
            </AdditionalSteps>
          </Steeltoe.Client.Components.RunAppTab.DockerCompose>
			  </TabSet>
        <Note>Confirm everything started successfully by running <code>docker-compose ps</code> and checking the State. Output should look similar to this:
              <pre><code>     Name                    Command               State                                 Ports
-----------------------------------------------------------------------------------------------------------------------------
steeltoe-app      dotnet Grafana_Observabili ...   Up      0.0.0.0:80->80/tcp
telegraf          /entrypoint.sh --config=/e ...   Up      8092/udp, 8094/tcp, 8125/udp
wavefront-proxy   /bin/bash /run.sh                Up      0.0.0.0:2878->2878/tcp, 3878/tcp, 4242/tcp, 0.0.0.0:9411->9411/tcp</code></pre></Note>
			</div>
		</div>
    <div class="row">
			<div class="col-12 getting-started-header bold">Finally <b>use Wavefront</b> to view the metrics and traces being fed in</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
        <ol>
          <li>Navigate to your Wavefront instance and the "Dashboards" area
            <div><img src="images/wavefront/dashboards-nav.png" class="img-fluid col-8" /></div>
          </li>
          <li>Create a new dashboard by clicking "Create Dashboard" button
            <div><img src="images/wavefront/create-dashboard.png" class="img-fluid col-8" /></div>
          </li>
          <li>Now locate the "JSON" link toward the top of the window and click
            <div><img src="images/wavefront/json-link.png" class="img-fluid col-4" /></div>
          </li>
          <li>A popup window will be shown. Find the "Tree" drop down in the blue bar and change to "Code" view.
            <div><img src="images/wavefront/tree-drop-down.png" class="img-fluid col-4" /></div>
          </li>
          <li>Clear the pre-loaded JSON in the window and copy the contents of <b>dashboard-template.json</b> to the window.</li>
          <li>Click the "Accept" link to close the window and let Wavefront parse the JSON.</li>
          <li>Save your new dashboard by clicking the "Save" link at the top. A popup window will ask you to name your new dashboard and finish saving.
            <div><img src="images/wavefront/save-dashboard.png" class="img-fluid col-4" /></div>
          <Note>You must save the new dashboard for your application name to show and things start receiving data.</Note>
          </li>
          <li>To make sure the correct traces are being used, in the top bar make sure the "application" is set to "Zipkin" and the "service" is set to the name of your application.
            <div><img src="images/wavefront/application-and-service.png" class="img-fluid" /></div>
          </li>
          <li>Done! Everything else should be pre-loaded for you. As the application runs in Docker, the metrics are shown.</li>
        </ol>
      </div>
		</div>
    <div class="row">
			<div class="col-12 getting-started-header bold">Further <b>learning</b> in Wavefront</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
        <ul>
          <li>Notice the chart "Top Requests" in the bottom left corner. Click one of the URLs to view all of the traces coming in for your Steeltoe application. If you had other microservices they would also appear here and you can even configure your traces to deliver logs as well.
            <div><img src="images/wavefront/top-requests.png" class="img-fluid col-4" /></div>
          </li>
          <li>You can see your traces on the left and sort them, on the right you will see other metrics as well.</li>
          <li>To get even deeper, select a trace in the left and then find the "traceid" in the "Critical Path Breakdown" area. Copy that value.
            <div><img src="images/wavefront/get-traceid.png" class="img-fluid col-9" /></div>
            <br /><br />
            Then "Add Filter" from the link at the top and paste that traceid value in the "TraceId" text box. Now click the "Add Trace Id" button. Your view will refresh to show all the essentials of that specific trace!
            <div><img src="images/wavefront/traceid.png" class="img-fluid" /></div>
          </li>
          <li>Creating filters gives you all kinds of different ways to view data. In the "Add Filter" window clear the traceid value and click the "&lt;/&gt;" button. This switches your filter view to thre query builder. Here are a few queries to get started:<br /><br />
            <div>Get the last 100 traces: <code>limit(100, traces("Zipkin.wavefront_demo_app.httpclient:/api/v1/spans"))</code></div>
            <div>Find traces that took longer than 30 seconds: <code>limit(100, highpass(30ms, traces("Zipkin.wavefront_demo_app.httpclient:/api/v1/spans")))</code></div>
          <br />
          If you would like to learn more about the query builder have a look at <Href href="https://docs.wavefront.com/trace_data_query.html#use-query-editor-power-usershttps://docs.wavefront.com/trace_data_query.html#use-query-editor-power-users" NewWindow="true">Wavefront docs</Href>.
          </li>
        </ul>
      </div>
		</div>
	</TutorialSteps>
</Tutorial>

@code
{
	//private string ServiceName = "wavefront";
	//private string InstanceName = "mywavefrontapp";
	private const string ProjectName = "Wavefront_Observability";
}
