@page "/observability/grafana"

	<Breadcrumbs NavName="Grafana"
							 ParentLinkName="Observability"
							 ParentLinkUrl="/observability"
							 ShowGetStarted="false" />
<Tutorial>
	<Title>Using Grafana for app container metrics, distributed tracing, and observability</Title>
	<Description>This tutorial takes you creating a simple Steeltoe app with actuators, logging, and distributed tracing. With that app running you then export the data to an instance of Prometheus and visualize things in a Grafana dashboard.</Description>
	<TutorialSteps>
    <div class="row">
			<div class="col-12 getting-started-header">First, <b>clone to accompanying repo</b> that contains all the needed assets</div>
		</div>
    <div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						<TabSet>
							<Tab Title="Local">
								<pre><code class="powershell">git clone https://github.com/steeltoeoss-incubator/observability.git</code></pre>
                <pre><code class="powershell">cd observability/grafana</code></pre>
							</Tab>
						</TabSet>
					</li>
          <li>
            Have a look at what things are provided
            <code class="inline-no-ps">PS C:\tmp\observability\grafana> ls</code>
<pre><code>Name                Description
----                ----
dashboard.json      The Grafana dashboard definition
dashboard.yml       Grafana dashboard provider
datasource.yml      Grafana datasource definition for prometheus and influxdb 
docker-compose.yml  Docker file to start all containers
prometheus.yml      Prometheus scrape configs
telegraf.conf       Telegraf inputs and output configuration
</code></pre>
          </li>
				</ol>
			</div>
		</div>
    <div class="row">
			<div class="col-12 getting-started-header">Next, <b>create a .NET Core WebAPI</b> with the correct Steeltoe dependencies</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
				<ol>
					<li>
						<Steeltoe.Client.Components.AppSettingsTab.Initiallizr ImageName="actuators-dynamiclogger-dockerfile_net31_st24.png" DependencyName="Actuators, DynamicLogging, Dockerfile" ProjectName="@ProjectName" />
					</li>
					<li>Extract the zipped project and open in your IDE of choice</li>
					<li>
						Add the other needed actuators in <b>startup.cs</b>
<pre><code>using Steeltoe.Management.Endpoint.Metrics;
using Steeltoe.Management.Tracing;
using Steeltoe.Management.Exporter.Tracing;

...

public class Startup
{
  ...

  public void ConfigureServices(IServiceCollection services)
  {
  
    ...
  
    services.AddPrometheusActuator(Configuration);
    services.AddMetricsActuator(Configuration);
    services.AddDistributedTracing(Configuration);
    services.AddZipkinExporter(Configuration);

    ...

  }
 
  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
  {

    ...

		app.UsePrometheusActuator();
		app.UseMetricsActuator();
		app.UseTracingExporter();

    ...

  }
}</code></pre>
					</li>
					<li>
						Set the actuator path and exposure addresses in <b>appsettings.json</b>
						<TabSet>
							<Tab Title="Local">
								<pre><code>{
  "Logging": {
    "LogLevel": {
      "Default": "Debug",
      "System": "Information",
      "Microsoft": "Information"
    }
  },
  "spring": {
    "application": {
      "name": "@(ProjectName)"
    }
  },
  "management": {
    "endpoints": {
      "actuator": {
        "exposure": {
          "include": [ "*" ]
        }
      },
      "path": "/actuators",
      "cloudfoundry": {
        "validateCertificates": false
      }
    },
    "metrics": {
      "exporter": {
        "cloudfoundry": {
          "validateCertificates": false
        }
      }
    },
    "tracing": {
      "alwaysSample": true,
      "useShortTraceIds ": true,
      "exporter": {
        "zipkin": {
          "endpoint": "http://zipkin:9411/api/v2/spans",
          "validateCertificates": false
        }
      }
    }
  }
}</code></pre>
							</Tab>
						</TabSet>
					</li>
          <li>
            Adjust <b>docker-compose.yml</b> to include the path to the .NET project by replacing <code>&lt;ABSOLUTE_PATH_TO_PROJECT&gt;</code> with the absolute path to the folder holding the .csproj file.
          </li>
				</ol>
			</div>
		</div>
    <div class="row">
			<div class="col-12 getting-started-header">Next, <b>deploy everything</b> with docker compose</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
        <TabSet>
				  <Steeltoe.Client.Components.RunAppTab.DockerCompose TerminalPromptPrefix="C:\tmp\observability\grafana">
            <AdditionalSteps>
            <Note>If you get a permission error message about "db.lock" close your IDE. Then run docker-compose command again.</Note>
            <Note>Confirm everything started successfully by running <code>docker-compose ps</code> and checking the State. Output should look similar to this:
              <pre><code>    Name                  Command               State                          Ports
------------------------------------------------------------------------------------------------------------
grafana        /run.sh                          Up      0.0.0.0:3000->3000/tcp
influxdb       /entrypoint.sh influxd           Up      0.0.0.0:8086->8086/tcp
prometheus     /bin/prometheus --config.f ...   Up      0.0.0.0:9090->9090/tcp
steeltoe-app   dotnet Grafana_Observabili ...   Up      0.0.0.0:80->80/tcp
telegraf       /entrypoint.sh --config=/e ...   Up      8092/udp, 8094/tcp, 8125/udp, 0.0.0.0:9273->9273/tcp
zipkin         /busybox/sh run.sh               Up      0.0.0.0:9411->9411/tcp</code></pre></Note></AdditionalSteps>
          </Steeltoe.Client.Components.RunAppTab.DockerCompose>
			  </TabSet>
			</div>
		</div>
    <div class="row">
			<div class="col-12 getting-started-header">Finally, <b>navigate to Grafana</b> to see the default dashboard showing the app's metrics.</div>
		</div>
		<div class="row">
			<div class="col-12 getting-started-ordered-list">
        <Note><Message>The default username is <code>admin</code> and the password is <code>admin.</code></Message></Note>
        <TabSet>
				  <Tab Title="Local">
            Grafana is available at <Href href="http://localhost:3000" target="_blank">http://localhost:3000</Href>.
          </Tab>
			  </TabSet>
      </div>
		</div>
	</TutorialSteps>
</Tutorial>

@code
{
	//private string ServiceName = "grafana";
	//private string InstanceName = "mygrafanaservice";
	private const string ProjectName = "Grafana_Observability";
}
